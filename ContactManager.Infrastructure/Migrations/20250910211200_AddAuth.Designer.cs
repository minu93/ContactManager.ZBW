// <auto-generated />
using System;
using ContactManager.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContactManager.Infrastructure.Migrations
{
    [DbContext(typeof(ContactManagerDbContext))]
    [Migration("20250910211200_AddAuth")]
    partial class AddAuth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("ContactManager.Domain.Entities.ContactChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<string>("DataJson")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("ContactChanges", (string)null);
                });

            modelBuilder.Entity("ContactManager.Domain.Entities.CustomerNote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId", "CreatedAt");

                    b.ToTable("CustomerNotes", (string)null);
                });

            modelBuilder.Entity("ContactManager.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Gender")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumberBusiness")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumberMobile")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumberPrivate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Place")
                        .HasColumnType("TEXT");

                    b.Property<string>("Salutation")
                        .HasColumnType("TEXT");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Status");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ZipCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("People", (string)null);

                    b.HasDiscriminator().HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ContactManager.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ContactManager.Domain.Entities.Customer", b =>
                {
                    b.HasBaseType("ContactManager.Domain.Entities.Person");

                    b.Property<string>("CompanyContact")
                        .HasColumnType("TEXT")
                        .HasColumnName("CompanyContact");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT")
                        .HasColumnName("CompanyName");

                    b.Property<string>("CustomerType")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasColumnName("CustomerType");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("ContactManager.Domain.Entities.Employee", b =>
                {
                    b.HasBaseType("ContactManager.Domain.Entities.Person");

                    b.Property<int?>("CadreLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CadreLevel");

                    b.Property<string>("Department")
                        .HasColumnType("TEXT")
                        .HasColumnName("Department");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EmployeeNumber");

                    b.Property<int?>("Employment")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Employment");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("EndDate");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT")
                        .HasColumnName("Role");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("StartDate");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("ContactManager.Domain.Entities.Trainee", b =>
                {
                    b.HasBaseType("ContactManager.Domain.Entities.Employee");

                    b.Property<int?>("ActualTraineeYear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ActualTraineeYear");

                    b.Property<int?>("TraineeYears")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TraineeYears");

                    b.HasDiscriminator().HasValue("Trainee");
                });

            modelBuilder.Entity("ContactManager.Domain.Entities.CustomerNote", b =>
                {
                    b.HasOne("ContactManager.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
